<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.TestDataAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A class to create test data records.</description>
        <name>TestDataAPI</name>
        <script><![CDATA[var TestDataAPI = Class.create();
TestDataAPI.prototype =
{
	initialize:function(strPrefix)
	{
		this.SetPrefix(strPrefix);
	},
	
	Log:function(strContext, vValue)
	{
		Log('TestDataAPI: '+strContext+': '+GetStringValue(vValue));
	},

	Debug:function(strContext, vValue)
	{
		Debug('TestDataAPI: '+strContext+': '+GetStringValue(vValue));
	},
	
	DebugAllData:function(strContext)
	{
		this.Debug(strContext,RenderValue(this.GetAllData()));
	},
	
	SetPrefix:function(strPrefix)
	{
		this.m_strPrefix = ''+strPrefix;
	},
	
	GetPrefix:function()
	{
		return this.m_strPrefix;
	},
	
	GetAllData:function()
	{
		var result = {};

		result.x_snc_devtools_test = this.GetAllTestItems();
		result.sys_user = this.GetAllUsers();
		result.sys_user_group = this.GetAllGroups();
		result.sys_user_role = this.GetAllRoles();
		result.incident = this.GetAllIncidents();
		result.incident_task = this.GetAllIncidentTasks();
		result.problem = this.GetAllProblems();
		result.problem_task = this.GetAllProblemTasks();
		result.change_request = this.GetAllChangeRequests();
		result.change_task = this.GetAllChangeTasks();
		result.sc_request = this.GetAllRequests();
		//result.sc_req_item = this.GetAllRequestedItems();
		//result.sc_task = this.GetAllRequestTasks();
		result.sys_db_view = this.GetAllDatabaseViews();
		return result;
	},
	
	DeleteAllData:function(data)
	{
		if (IsObject(data) == false)
		{
			var data = this.GetAllData();
		}
		var aTables = GetKeys(data);
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var strTable = aTables[nTable];
			var aRecords = GetValue(data,strTable);
			if (IsArray(aRecords) == true)
			{
				for (var nRecord = 0; nRecord < aRecords.length; nRecord++)
				{
					var oRecord = aRecords[nRecord];
					var strSysId = GetValue(oRecord,'sys_id');
					if (IsValidSysId(strSysId) == true)
					{
						//Debug('Attempting to delete: '+strTable+': '+strSysId);
						RecordDelete(strTable,strSysId);
					}
				}
			}
		}
	},
	
	CreateTestItem:function(strName, strValue, strProcessedDateTime)
	{
		strName = GetStringValue(strName);
		strValue = GetStringValue(strValue);
		strProcessedDateTime = RenderDateTime(strProcessedDateTime);
		var strPrefix = this.GetPrefix();
		
		var grTestItem = new GlideRecord('x_snc_devtools_test');
		var strSysId = null;
		grTestItem.addQuery('name','=',strPrefix+strName);
		grTestItem.query();
		while(grTestItem.next())
		{
			grTestItem.getValue('sys_id');
			GlideRecordDelete(grTestItem);
		}
		
		grTestItem.initialize();
		grTestItem.name = strPrefix+strName;
		grTestItem.value = strValue;
		grTestItem.processed = strProcessedDateTime;
		strSysId = GlideRecordInsert(grTestItem);

		if (strSysId == null)
		{
			return null;
		}
		return strSysId;
	},
	
	GetAllTestItems:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grTestItem = new GlideRecord('x_snc_devtools_test');
		grTestItem.addQuery('name','STARTSWITH',strPrefix);
		grTestItem.orderBy('name');
		grTestItem.query();
		while (grTestItem.next())
		{
			aResult.push(Clone(grTestItem));
		}
		return aResult;
	},
	
	
	CreateUser:function(strName, aRoles, bTechnical)
	{
	
		strName = GetStringValue(strName);
		aRoles = GetArrayValue(aRoles); 
		bTechnical = GetBoolValue(bTechnical);
		
		strPrefix = this.GetPrefix();
		
		var grUser = new GlideRecord('sys_user');
		var strUserSysId = null;
		var bDeleted = true;
		if (grUser.get('user_name','=',strPrefix+strName))
		{
			strUserSysId = grUser.getValue('sys_id');
			bDeleted = GlideRecordDelete(grUser);
		}
		if (bDeleted == true || strUserSysId == null)
		{
			grUser.initialize();
			grUser.user_name = strPrefix+strName;
			grUser.first_name = strPrefix+strName;
			if (bTechnical == true)
			{
				grUser.web_service_access_only = true;
			}
			strUserSysId = GlideRecordInsert(grUser);
		}

		if (strUserSysId == null)
		{
			return null;
		}
		
		var grUserHasRole = new GlideRecord("sys_user_has_role");
		for (var nRole = 0; nRole < aRoles.length; nRole++)
		{
			var strRole = aRoles[nRole];
			if (strRole != '')
			{
				var grUserRole = new GlideRecord('sys_user_role');
				grUserRole.addQuery('name','=',strPrefix+strRole);
				grUserRole.query();
				if (grUserRole.getRowCount() == 0)
				{
					grUserRole = new GlideRecord('sys_user_role');
					grUserRole.addQuery('name','=',strRole);
					grUserRole.query();
				}
				if (grUserRole.getRowCount() == 1)
				{					
					if (grUserRole.next())
					{		
						grUserHasRole.initialize();
						grUserHasRole.role = grUserRole.sys_id;
						grUserHasRole.user = strUserSysId;
						GlideRecordInsert(grUserHasRole);
					}
				}
			}
		}
		return strUserSysId;
	},
	
	GetAllUsers:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grUser = new GlideRecord('sys_user');
		grUser.addQuery('user_name','STARTSWITH',strPrefix);
		grUser.orderBy('user_name');
		grUser.query();
		while (grUser.next())
		{
			var oUser = Clone(grUser);
			var aRoles = [];
			var grUserHasRole = new GlideRecord('sys_user_has_role');
			grUserHasRole.addQuery('user','=',grUser.sys_id);
			grUserHasRole.query();
			while (grUserHasRole.next())
			{
				var grRole = new GlideRecord('sys_user_role');
				if (grRole.get(grUserHasRole.role))
				{
					aRoles.push(grRole.name);
				}
			}
			aRoles = aRoles.sort();
			oUser['_roles'] = aRoles;
			aResult.push(oUser);
		}
		return aResult;
	},
	
	CreateGroup:function(strName, aUserNames)
	{	
		strName = GetStringValue(strName);
		aUserNames = GetArrayValue(aUserNames);
	
		var strPrefix = this.GetPrefix();
		
		var grGroupToDelete = new GlideRecord('sys_user_group');
		grGroupToDelete.addQuery('name','=',strPrefix+strName);
		grGroupToDelete.query();
		GlideRecordDeleteMultiple(grGroupToDelete);

		var grGroup = new GlideRecord('sys_user_group');
		grGroup.initialize();
		grGroup.name = strPrefix+strName;
		var strGroupSysId = GlideRecordInsert(grGroup);

		if (strGroupSysId == null)
		{
			return null;
		}
		
		var grGroupMember = new GlideRecord('sys_user_grmember');
		aUserNames.forEach(function(strUserName)
		{
			if (strUserName != '')
			{
				var grUser = new GlideRecord("sys_user");
				if (grUser.get('user_name',strPrefix+strUserName))
				{						
					grGroupMember.initialize();
					grGroupMember.group = strGroupSysId;
					grGroupMember.user = grUser.sys_id;
					GlideRecordInsert(grGroupMember);
				}

			}
		});
		return strGroupSysId;
	},
	
	GetAllGroups:function()
	{
		var aGroups = [];
		var strPrefix = this.GetPrefix();
		
		var grGroup = new GlideRecord('sys_user_group');
		grGroup.addQuery('name','STARTSWITH',strPrefix);
		grGroup.orderBy('name');
		grGroup.query();
		while (grGroup.next())
		{
			aGroups.push(Clone(grGroup));
		}
		return aGroups;
	},	
	
	CreateRole:function(strName)
	{	
		strName = GetStringValue(strName);
		
		var strPrefix = this.GetPrefix();
		
		var grRoleToDelete = new GlideRecord('sys_user_role');
		grRoleToDelete.addQuery('name','=',strPrefix+strName);
		grRoleToDelete.query();
		GlideRecordDeleteMultiple(grRoleToDelete);

		var grRole = new GlideRecord('sys_user_role');
		grRole.initialize();
		GlideRecordSetValue(grRole,'name',strPrefix+strName);
		//grRole.state = 'active';
		var strRoleSysId = GlideRecordInsert(grRole);

		if (strRoleSysId == null)
		{
			return null;
		}
		return strRoleSysId;
	},
		
	GetAllRoles:function()
	{
		var aRoles = [];
		var strPrefix = this.GetPrefix();
		
		var grRole = new GlideRecord('sys_user_role');
		grRole.addQuery('name','STARTSWITH',strPrefix);
		grRole.orderBy('name');
		grRole.query();
		while (grRole.next())
		{
			aRoles.push(Clone(grRole));
		}
		return aRoles;
	},
	
	CreateIncident:function(strName, strOpenedByUserName, strCallerUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;

		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strCallerUserName = GetStringValue(strCallerUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);	

		var strPrefix = this.GetPrefix(); 

		var grIncidentToDelete = new GlideRecord('incident');
		grIncidentToDelete.addQuery('short_description','=',strPrefix+strName);
		grIncidentToDelete.query();
		GlideRecordDeleteMultiple(grIncidentToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}				
		
		var strCallerUserSysId = '';
		if (strCallerUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strCallerUserName))
			{
				strCallerUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grIncident = new GlideRecord('incident');
		grIncident.initialize();
		grIncident.short_description = strPrefix+strName;
		grIncident.opened_by = strOpenedByUserSysId;
		grIncident.caller_id = strCallerUserSysId;
		grIncident.assignment_group = strAssignmentGroupSysId;
		var strIncidentSysId = GlideRecordInsert(grIncident);
		
		if (strIncidentSysId == null)
		{
			return null;
		}
		return strIncidentSysId;
	},

	GetAllIncidents:function()
	{
		var aIncidents = [];
		var strPrefix = this.GetPrefix();
		
		var grIncident = new GlideRecord('incident');
		grIncident.addQuery('short_description','STARTSWITH',strPrefix);
		grIncident.orderBy('short_description');
		grIncident.query();
		while (grIncident.next())
		{
			var oIncident = Clone(grIncident);
			var aTaskSLA = [];
			var grTaskSLA = new GlideRecord('task_sla');
			grTaskSLA.addQuery('task','=',grIncident.sys_id);
			GlideRecordQuery(grTaskSLA);
			while (grTaskSLA.next())
			{
				aTaskSLA.push(Clone(grTaskSLA));
			}
			oIncident['_task_sla'] = aTaskSLA;
			aIncidents.push(oIncident);
		}
		return aIncidents;
	},
	
	CreateIncidentTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;

		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grIncidentTaskToDelete = new GlideRecord('incident_task');
		grIncidentTaskToDelete.addQuery('short_description','=',strShortDescription);
		grIncidentTaskToDelete.query();
		GlideRecordDeleteMultiple(grIncidentTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strIncidentSysId = '';
		if (strParentName != '')
		{
			var grIncident = new GlideRecord('incident');
			if (grIncident.get('short_description',strPrefix+strParentName))
			{
				strIncidentSysId = grIncident.sys_id;
			}
		}	
		
		var grIncidentTask = new GlideRecord('incident_task');
		grIncidentTask.initialize();
		grIncidentTask.incident = strIncidentSysId;
		grIncidentTask.short_description = strShortDescription;
		grIncidentTask.opened_by = strOpenedByUserSysId;
		grIncidentTask.assignment_group = strAssignmentGroupSysId;
		var strIncidentTaskSysId = GlideRecordInsert(grIncidentTask);
		
		if (strIncidentTaskSysId == null)
		{
			return null;
		}
		return strIncidentTaskSysId;
	},
	
	GetAllIncidentTasks:function()
	{
		var aIncidentTasks = [];
		var strPrefix = this.GetPrefix();
		
		var grIncidentTask = new GlideRecord('incident_task');
		grIncidentTask.addQuery('short_description','STARTSWITH',strPrefix);
		grIncidentTask.orderBy('short_description');
		grIncidentTask.query();
		while (grIncidentTask.next())
		{
			aIncidentTasks.push(Clone(grIncidentTask));
		}
		return aIncidentTasks;
	},	
	
	CreateChangeRequest:function(strName, strOpenedByUserName, strRequestedByUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;

		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strRequestedByUserName = GetStringValue(strRequestedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var grChangeRequestToDelete = new GlideRecord('change_request');
		grChangeRequestToDelete.addQuery('short_description','=',strPrefix+strName);
		grChangeRequestToDelete.query();
		GlideRecordDeleteMultiple(grChangeRequestToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strRequestedByUserSysId = '';
		if (strRequestedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strRequestedByUserName))
			{
				strRequestedByUserSysId = grUser.sys_id;
			}
		}	
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grChangeRequest = new GlideRecord('change_request');
		grChangeRequest.initialize();
		grChangeRequest.short_description = strPrefix+strName;
		grChangeRequest.opened_by = strOpenedByUserSysId;
		grChangeRequest.requested_by = strRequestedByUserSysId;
		grChangeRequest.assignment_group = strAssignmentGroupSysId;
		var strChangeRequestSysId = GlideRecordInsert(grChangeRequest);
		if (strChangeRequestSysId == null)
		{
			return null;
		}
		return strChangeRequestSysId;
	},
		
	GetAllChangeRequests:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grChangeRequests = new GlideRecord('change_request');
		grChangeRequests.addQuery('short_description','STARTSWITH',strPrefix);
		grChangeRequests.orderBy('short_description');
		grChangeRequests.query();
		while (grChangeRequests.next())
		{
			aResult.push(Clone(grChangeRequests));
		}
		return aResult;
	},		
	
	CreateChangeTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		
		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grChangeTaskToDelete = new GlideRecord('change_task');
		grChangeTaskToDelete.addQuery('short_description','=',strShortDescription);
		grChangeTaskToDelete.query();
		GlideRecordDeleteMultiple(grChangeTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strChangeRequestSysId = '';
		if (strParentName != '')
		{
			var grChangeRequest = new GlideRecord('change_request');
			if (grChangeRequest.get('short_description',strPrefix+strParentName))
			{
				strChangeRequestSysId = grChangeRequest.sys_id;
			}
		}	
		
		var grChangeTask = new GlideRecord('change_task');
		grChangeTask.initialize();
		grChangeTask.change_request = strChangeRequestSysId;
		grChangeTask.short_description = strShortDescription;
		grChangeTask.opened_by = strOpenedByUserSysId;
		grChangeTask.assignment_group = strAssignmentGroupSysId;
		var strChangeTaskSysId = GlideRecordInsert(grChangeTask);
		
		if (strChangeTaskSysId == null)
		{
			return null;
		}
		return strChangeTaskSysId;
	},
	
	GetAllChangeTasks:function()
	{
		var aChangeTasks = [];
		var strPrefix = this.GetPrefix();
		
		var grChangeTasks = new GlideRecord('change_task');
		grChangeTasks.addQuery('short_description','STARTSWITH',strPrefix);
		grChangeTasks.orderBy('short_description');
		grChangeTasks.query();
		while (grChangeTasks.next())
		{
			aChangeTasks.push(Clone(grChangeTasks));
		}
		return aChangeTasks;
	},		
		
	CreateProblem:function(strName, strOpenedByUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;

		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var grProblemToDelete = new GlideRecord('problem');
		grProblemToDelete.addQuery('short_description','=',strPrefix+strName);
		grProblemToDelete.query();
		GlideRecordDeleteMultiple(grProblemToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grProblem = new GlideRecord('problem');
		grProblem.initialize();
		grProblem.short_description = strPrefix+strName;
		grProblem.opened_by = strOpenedByUserSysId;
		grProblem.assignment_group = strAssignmentGroupSysId;
		var strProblemSysId = GlideRecordInsert(grProblem);
		
		if (strProblemSysId == null)
		{
			return null;
		}
		return strProblemSysId;
	},

	GetAllProblems:function()
	{
		var aProblems = [];
		var strPrefix = this.GetPrefix();
		
		var grProblem = new GlideRecord('problem');
		grProblem.addQuery('short_description','STARTSWITH',strPrefix);
		grProblem.orderBy('short_description');
		grProblem.query();
		while (grProblem.next())
		{
			aProblems.push(Clone(grProblem));
		}
		return aProblems;
	},		
	
	CreateProblemTask:function(strParentName, strName, strOpenedByUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		
		strParentName = GetStringValue(strParentName);
		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);

		var strPrefix = this.GetPrefix(); 

		var strShortDescription = strPrefix+strParentName+'_'+strName;
		
		var grProblemTaskToDelete = new GlideRecord('problem_task');
		grProblemTaskToDelete.addQuery('short_description','=',strShortDescription);
		grProblemTaskToDelete.query();
		GlideRecordDeleteMultiple(grProblemTaskToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord('sys_user');
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord('sys_user_group');
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var strProblemSysId = '';
		if (strParentName != '')
		{
			var grProblem = new GlideRecord('problem');
			if (grProblem.get('short_description',strPrefix+strParentName))
			{
				strProblemSysId = grProblem.sys_id;
			}
		}	
		
		var grProblemTask = new GlideRecord('problem_task');
		grProblemTask.initialize();
		grProblemTask.problem = strProblemSysId;
		grProblemTask.short_description = strShortDescription;
		grProblemTask.opened_by = strOpenedByUserSysId;
		grProblemTask.assignment_group = strAssignmentGroupSysId;
		var strProblemTaskSysId = GlideRecordInsert(grProblemTask);
		
		if (strProblemTaskSysId == null)
		{
			return null;
		}
		return strProblemTaskSysId;
	},
	
	GetAllProblemTasks:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grProblemTask = new GlideRecord('problem_task');
		grProblemTask.addQuery('short_description','STARTSWITH',strPrefix);
		grProblemTask.orderBy('short_description');
		grProblemTask.query();
		while (grProblemTask.next())
		{
			aResult.push(Clone(grProblemTask));
		}
		return aResult;
	},		
	
	CreateRequest:function(strName, strOpenedByUserName, strRequestedForUserName, strAssignmentGroupName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;

		strName = GetStringValue(strName);
		strOpenedByUserName = GetStringValue(strOpenedByUserName);
		strRequestedForUserName = GetStringValue(strRequestedForUserName);
		strAssignmentGroupName = GetStringValue(strAssignmentGroupName);
		
		var strPrefix = this.GetPrefix(); 

		var grRequestToDelete = new GlideRecord('sc_request');
		grRequestToDelete.addQuery('short_description','=',strPrefix+strName);
		grRequestToDelete.query();
		GlideRecordDeleteMultiple(grRequestToDelete);

		var strOpenedByUserSysId = '';
		if (strOpenedByUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strOpenedByUserName))
			{
				strOpenedByUserSysId = grUser.sys_id;
			}
		}		
		
		var strRequestedForUserSysId = '';
		if (strRequestedForUserName != '')
		{
			var grUser = new GlideRecord("sys_user");
			if (grUser.get('user_name',strPrefix+strRequestedForUserName))
			{
				strRequestedForUserSysId = grUser.sys_id;
			}
		}	 
		
		var strAssignmentGroupSysId = '';
		if (strAssignmentGroupName != '')
		{
			var grGroup = new GlideRecord("sys_user_group");
			if (grGroup.get('name',strPrefix+strAssignmentGroupName))
			{
				strAssignmentGroupSysId = grGroup.sys_id;
			}
		}
		
		var grRequest = new GlideRecord('sc_request');
		grRequest.initialize();
		grRequest.short_description = strPrefix+strName;
		grRequest.opened_by = strOpenedByUserSysId;
		grRequest.requested_for = strRequestedForUserSysId;
		grRequest.assignment_group = strAssignmentGroupSysId;
		var strRequestSysId = GlideRecordInsert(grRequest);
		if (strRequestSysId == null)
		{
			return null;
		}
		return strRequestSysId;
		
	},
	
	GetAllRequests:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		var grRequests = new GlideRecord('sc_request');
		grRequests.addQuery('short_description','STARTSWITH',strPrefix);
		grRequests.orderBy('short_description');
		grRequests.query();
		while (grRequests.next())
		{
			aResult.push(Clone(grRequests));
		}
		return aResult;
	},		
	
	
	
	CreateDatabaseView:function(strName, oDbView)
	{
		strName = GetStringValue(strName);
		
		if (strName == '')
		{
			return null;
		}
		
		if (IsObject(oDbView) == false)
		{
			this.Debug('CreateDatabaseView','oDbView is NOT an object!');
			return null;
		}

		var aTables = GetArrayValue(GetValue(oDbView,'tables'));
		if (aTables.length == 0)
		{
			this.Debug('CreateDatabaseView','No tables are specified!');
			return null;
		}
	
		
		var strDatabaseViewName = this.GetDatabaseViewName(strName);
		
		this.Debug('CreateDatabaseView',strName+' / '+strDatabaseViewName);		

		var grDbViewToDelete = new GlideRecord('sys_db_view');
		grDbViewToDelete.addQuery('name','=',strDatabaseViewName);
		grDbViewToDelete.query();
		while(grDbViewToDelete.next())
		{
			this.Debug('CreateDatabaseView','Deleting existing database view "'+strDatabaseViewName+'"!');
			GlideRecordDelete(grDbViewToDelete);
		}
		
		var grDbView = new GlideRecord('sys_db_view');
		grDbView.initialize();
		grDbView.name = strDatabaseViewName;
		var strDbViewSysId = GlideRecordInsert(grDbView);
		if (strDbViewSysId == null)
		{
			this.Debug('CreateDatabaseView','Failed to create database view "'+strDatabaseViewName+'"!');
			return null;
		}
		
		for (var nTable = 0; nTable < aTables.length; nTable++)
		{
			var table = aTables[nTable];
			if (IsObject(table) == true)
			{
				var grDbViewTable = new GlideRecord('sys_db_view_table');
				grDbViewTable.initialize();
				grDbViewTable.active = true;
				grDbViewTable.view = strDbViewSysId;
				grDbViewTable.table = GetValue(table,'table');
				grDbViewTable.order = GetStringValue(GetValue(table,'order'));
				grDbViewTable.left_join = GetBoolValue(GetValue(table,'left_join'));
				grDbViewTable.variable_prefix = GetValue(table,'variable_prefix');
				grDbViewTable.where_clause = GetValue(table,'where_clause');
				var strDbViewTableSysId = GlideRecordInsert(grDbViewTable);
				
				if (IsValidSysId(strDbViewTableSysId))
				{
					var aFields = GetArrayValue(GetValue(table,'fields'));
					for (var nField = 0; nField < aFields.length; nField++)
					{
						var strField = aFields[nField];
						if (strField != '')
						{
							var grDbViewTableField = new GlideRecord('sys_db_view_table_field');
							grDbViewTableField.initialize();
							grDbViewTableField.field = strField;
							grDbViewTableField.view_table = strDbViewTableSysId;
							grDbViewTableField.table = GetValue(table,'table');
							var strDbViewTableFieldSysId = GlideRecordInsert(grDbViewTableField);
						}
					}
				}
				
			}
		}
		
		
		
		this.Debug('CreateDatabaseView','Database view '+strDatabaseViewName+' has been created. sys_id='+strDbViewSysId);

		return strDbViewSysId;
		
	},	

	GetDatabaseViewPrefix:function()
	{
		return 'u_'+this.GetPrefix().toLowerCase();
	},	
	
	GetDatabaseViewName:function(strName)
	{
		return this.GetDatabaseViewPrefix()+strName.toLowerCase();
	},
	
	GetAllDatabaseViews:function()
	{
		var aResult = [];
		var strPrefix = this.GetDatabaseViewPrefix();
		
		var grDbViews = new GlideRecord('sys_db_view');
		grDbViews.addQuery('name','STARTSWITH',strPrefix);
		grDbViews.orderBy('name');
		grDbViews.query();
		while (grDbViews.next())
		{
			var dbview = Clone(grDbViews);
			
			var aTables = [];
			
			var grDbViewTables = new GlideRecord('sys_db_view_table');
			grDbViewTables.addQuery('view','=',grDbViews.sys_id);
			grDbViewTables.query();
			while (grDbViewTables.next())
			{
				var table = Clone(grDbViewTables);
				
				var aFields = [];
				var grDbViewTableFields = new GlideRecord('sys_db_view_table_field');
				grDbViewTableFields.addQuery('view_table','=',grDbViewTables.sys_id);
				grDbViewTableFields.orderBy('field');
				grDbViewTableFields.query();
				while (grDbViewTableFields.next())
				{
					var field = Clone(grDbViewTableFields);
					aFields.push(field);
				}
				table['_fields'] = aFields;
				aTables.push(table);
			}
			dbview['_tables'] = aTables;
			aResult.push(dbview);
		}
		return aResult;
	},			
	
	
	
	type: 'TestDataAPI'
	
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-13 14:53:39</sys_created_on>
        <sys_id>1796abb01b78d410a89720a8ec4bcb1e</sys_id>
        <sys_mod_count>140</sys_mod_count>
        <sys_name>TestDataAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_1796abb01b78d410a89720a8ec4bcb1e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-07-05 13:35:23</sys_updated_on>
    </sys_script_include>
</record_update>
