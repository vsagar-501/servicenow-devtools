<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.DocumentationAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The DocumentationAPI helps to render fragments of an HTML page that documents the components of a scoped application.</description>
        <name>DocumentationAPI</name>
        <script><![CDATA[var DocumentationAPI = Class.create();
DocumentationAPI.prototype = {
    
	initialize: function(strAppSysId)
	{
		this.m_bInit = false;
		this.m_strAppName = 'UNDEFINED';
		this.m_strAppVersion = '';
		this.m_strScope = '';
		this.m_bGitHubRepeat = false;
		
		this.m_strAppSysId = GetStringValue(strAppSysId);
		var grApp = new GlideRecord('sys_app');
		if (grApp.get(this.m_strAppSysId) == true)
		{
			this.m_bInit = true;
			this.m_strAppName = GetStringValue(grApp.getValue('name'));
			this.m_strAppVersion = GetStringValue(grApp.getValue('version'));
			this.m_strScope = GetStringValue(grApp.getValue('scope'));
		}
    
	},
	
	RenderHeader: function()
	{
		return '<h1>'+this.m_strAppName+' '+this.m_strAppVersion+'</h1>';
	},
	
	RenderLink: function(strURL,strText,bExternal)
	{
		strURL = GetStringValue(strURL);
		strText = GetStringValue(strText);
		bExternal = GetBoolValue(bExternal);
		if (strText == '')
		{
			strText = strURL;
		}
		var strHTML = '<a href="'+strURL+'"';
		if (bExternal)
		{
			strHTML += ' target="_blank"';
		}
		strHTML += '>'+strText+'</a>';
		return strHTML;
	},
	
	RenderListItem: function(strItem, strURL, strText)
	{
		strURL = GetStringValue(strURL);
		var strHTML = '';
		strHTML += '<li>';
		if (strURL != '')
		{
			strHTML += this.RenderLink(strURL,strItem,false);
		}
		else
		{
			strHTML += '<b>'+strItem +'</b>&#160;';
		}
		strHTML += '<p>'+strText+'</p>';
		strHTML += '</li>';		
		return strHTML;
	},
	
	RenderCopyright: function(nCopyrightYear, strCopyrightHolder)
	{
		var strYear = '';
		nCopyrightYear = GetIntegerValue(nCopyrightYear);
		strCopyrightHolder = GetStringValue(strCopyrightHolder);
		var nCurrentYear = GetIntegerValue(new Date().getFullYear());
		if (nCurrentYear == nCopyrightYear)
		{
			strYear = GetStringValue(nCopyrightYear);
		}
		else
		{
			strYear = GetStringValue(nCopyrightYear)+'-'+GetStringValue(nCurrentYear);
		}
		return '<p>Copyright '+strYear+' by '+strCopyrightHolder+'</p>';
	},
	
	RenderDisclaimer: function()
	{
		var strHTML = '';
		strHTML += '<p>'+GetAppName(this.m_strAppSysId)+' is NOT an officially supported ServiceNow product.</p>';
		strHTML += '<p>'+GetAppName(this.m_strAppSysId)+' does NOT come with any kind of warranty. If you use it, you own it!</p>';
		return strHTML;
	},	
	
	RenderLicense: function()
	{
		var strLicense = '';
		
		strLicense += '<p>Licensed under the Apache License, Version 2.0 (the "License")</p>';
		strLicense += '<p>You may not use DevTools except in compliance with the License.</p>';
		strLicense += '<p>You may obtain a copy of the License at: '+this.RenderLink('https://www.apache.org/licenses/LICENSE-2.0','',true)+'</p>';
		strLicense += '<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>';
		return strLicense;
	},
	
	RenderRoles: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grUR = new GlideRecord('sys_user_role');
		grUR.addQuery('sys_scope','=',this.m_strAppSysId);
		grUR.orderBy('name');
		grUR.query();

		var strHTML = '<ul>';
		while (grUR.next())
		{
			strHTML += this.RenderListItem(
				grUR.getValue('name'),
				'',
				grUR.getValue('description'))
		}
		strHTML += '</ul>';
		return strHTML;			
	},
	
	RenderProperties: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('sys_scope','=',this.m_strAppSysId);
		grSP.orderBy('name');
		grSP.query();

		var strHTML = '<ul>';
		while (grSP.next())
		{
			var strDescription = HtmlEncode(grSP.getValue('description'));
			strHTML += this.RenderListItem(
				grSP.getValue('name'),
				'/sys_properties.do?sys_id='+grSP.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;	
	},
	
	RenderEvents: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grEvent = new GlideRecord('sysevent_register');
		grEvent.addQuery('sys_scope','=',this.m_strAppSysId);
		grEvent.orderBy('event_name');
		grEvent.query();

		var strHTML = '<ul>';
		while (grEvent.next())
		{
			strHTML += this.RenderListItem(
				grEvent.getValue('event_name'),
				'',
				grEvent.getValue('description'));
		}
		strHTML += '</ul>';
		return strHTML;			
	},
	
	RenderScriptIncludes: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.addQuery('sys_scope','=',this.m_strAppSysId);
		grSSI.addQuery('access','=','public');
		grSSI.orderBy('name');
		grSSI.query();

		var strHTML = '<ul>';
		while (grSSI.next())
		{
			var strDescription = HtmlEncode(grSSI.getValue('description'));
			
			strHTML += this.RenderListItem(
				grSSI.getValue('name'),
				'/sys_script_include.do?sys_id='+grSSI.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;
	},
	
	RenderTestStepConfigurations: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSC = new GlideRecord('sys_atf_step_config');
		grSC.addQuery('sys_scope','=',this.m_strAppSysId);
		grSC.orderBy('name');
		grSC.query();

		
		var strHTML = '<ul>';
		while (grSC.next())
		{
			var strDescription = GetStringValue(grSC.getValue('html_description'));
			strDescription = strDescription.replace('<p>','');
			strDescription = strDescription.replace('</p>','');
						
			strHTML += this.RenderListItem(
				grSC.getValue('name'),
				'/sys_atf_step_config.do?sys_id='+grSC.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;	
	},
	
	RenderInstallationInstructionsImportFromSourceControl: function(strAppName, strRepoURL)
	{
		var strHTML = '';
		if (this.m_bGitHubRepeat == false)
		{
			this.m_bGitHubRepeat = true;
			strHTML += '<li>To install '+strAppName+' create an account on&#160;<a href="https://github.com/" target="_blank">GitHub</a>&#160;(if not done already).</li>';
			strHTML += '<li>Create a&#160;<a href="https://github.com/settings/tokens" target="_blank">personal access token</a>&#160;for your GitHub account.</li>';
			strHTML += '<li>Paris or later: Add&#160;<a href="/discovery_credentials_list.do" target="_blank">credentials</a>&#160;to access GitHub (Use "Basic Auth").</li>';
		}
		strHTML += '<li>Fork the repository&#160;<a href="'+strRepoURL+'" target="_blank">'+strRepoURL+'</a>.</li>';
		strHTML += '<li>Go to&#160;<a href="/$studio.do" target="_blank">Studio</a>&#160;and import the '+strAppName+' application from source control.</li>';
		return strHTML;
	},
	
	RenderInstallationInstructionsAppInstall: function(strScope)
	{
		var strScope = GetStringValue(strScope);
		if (strScope == '')
		{
			strScope = this.m_strScope;
		}
		var strHTML = '';
		strHTML +=	'<li>Execute the following script in the scope '+strScope+' as a <a href="/sys.scripts.do" target="_blank">background script</a>:</li>';
		strHTML +=	'<pre>AppInstall();</pre>';
		return strHTML;
	},
	
	RenderError: function()
	{
		return '<p style="color:red">ERROR: DocumentationAPI is not initialized!</p>';
	},

    type: 'DocumentationAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-20 15:26:20</sys_created_on>
        <sys_id>98912146db31e490ba15a353059619b6</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>DocumentationAPI</sys_name>
        <sys_package display_value="DevTools" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_98912146db31e490ba15a353059619b6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-30 10:49:36</sys_updated_on>
    </sys_script_include>
</record_update>
